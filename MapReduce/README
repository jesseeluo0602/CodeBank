http://www-inst.eecs.berkeley.edu/~cs61c/fa13/proj/01/

Overview
For this project, you're finally going to roll up your sleeves and use MapReduce to answer a big data problem. The question you're going to answer is this: given a word, what other words are statistically associated with it? If I say 'love', or 'death', or 'terrorism', what other words and concepts go with it? 

A reasonable statistical definition is the co-occurrence, which measures how often two words appear together in documents. Given a target word, we can figure out which words in a body of text (called the corpus) are most closely related to it by ranking each unique word in the corpus by its co-occurrence rate with the target word. To calculate:

    Let Aw be the number of occurrences of w in the corpus. 
    Let Cw be the number of occurrences of w in documents that also have the target word.

   Co-occurrence rate :=  if(Cw > 0)   Cw * (log(Cw))3  / Aw  
                                    else  0

Note that 1) we will use the natural logarithm when calculating co-occurrence and 2) we will not be calculating co-occurrence.

Here is an example that illustrates this definition. Let the target word be "Dave": 
Doc_ID#1: Randy, Krste, Dave
Doc_ID#2: Randy, Dave, Randy
Doc_ID#3: Randy, Krste, Randy

Occurrences: ARandy = 5; AKrste = 2; 
Co-occurrences: CRandy = 3; CKrste = 1; 
Co-occurrence Rate:
with Randy: CRandy * (log(CRandy))3 / ARandy = 3/5 * (log(3))3 = 0.7956
with Krste: CKrste * (log(CKrste))3 / AKrste = 1/2 * (log(1))3 = 0
This does nothing to account for the distance between words however. A fairly straightforward generalization of the problem is to, instead of giving each co-occurence a value of 1, give it a value f(d), where d is the minimum distance from the word occurrence to the nearest instance of the target word measured in words. Suppose our target word is cat. The values of d for each word is given below: 
Document:     The fat cat did not like the skinny cat.
Value of d:    2   1       1   2    3   2     1

If the target word does not exist in the document, the value of d should be Double.POSITIVE_INFINITY. 

The function f() takes d as input and outputs another number. We will define f() to send infinity to 0 and positive numbers to numbers greater than or equal to one. The result of the generalization is as follows:
    Let Aw be the number of occurrences of w in the corpus. 
    Let Sw be the the sum of f(dw) over all occurrences of w in the corpus.

   Co-occurrence rate :=  if(Sw > 0)   Sw * (log(Sw))3  / Aw  
                                    else  0

Your task is to produce an ordered list of words for the target word sorted by generalized co-occurrence rate, ordered with the biggest co-occurrence rates at the top. The data will be the same data we used in labs 2 and 3. This isn't the most sophisticated text-analysis algorithm out there, but it's enough to illustrate what you can do with MapReduce.
